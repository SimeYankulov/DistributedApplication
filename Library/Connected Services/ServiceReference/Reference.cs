//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService1")]
    public interface IService1
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<SOAP.CompositeType> GetDataUsingDataContractAsync(SOAP.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudents", ReplyAction="http://tempuri.org/IService1/GetStudentsResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.StudentDTO[]> GetStudentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudentByID", ReplyAction="http://tempuri.org/IService1/GetStudentByIDResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.StudentDTO> GetStudentByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostStudent", ReplyAction="http://tempuri.org/IService1/PostStudentResponse")]
        System.Threading.Tasks.Task<string> PostStudentAsync(ApplicationService.DTOs.StudentDTO studentDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteStudent", ReplyAction="http://tempuri.org/IService1/DeleteStudentResponse")]
        System.Threading.Tasks.Task<string> DeleteStudentAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBooks", ReplyAction="http://tempuri.org/IService1/GetBooksResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.BookDTO[]> GetBooksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBookByID", ReplyAction="http://tempuri.org/IService1/GetBookByIDResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.BookDTO> GetBookByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostBook", ReplyAction="http://tempuri.org/IService1/PostBookResponse")]
        System.Threading.Tasks.Task<string> PostBookAsync(ApplicationService.DTOs.BookDTO bookDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteBook", ReplyAction="http://tempuri.org/IService1/DeleteBookResponse")]
        System.Threading.Tasks.Task<string> DeleteBookAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBorrows", ReplyAction="http://tempuri.org/IService1/GetBorrowsResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.BorrowDTO[]> GetBorrowsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBorrowByID", ReplyAction="http://tempuri.org/IService1/GetBorrowByIDResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.BorrowDTO> GetBorrowByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostBorrow", ReplyAction="http://tempuri.org/IService1/PostBorrowResponse")]
        System.Threading.Tasks.Task<string> PostBorrowAsync(ApplicationService.DTOs.BorrowDTO borrowDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteBorrow", ReplyAction="http://tempuri.org/IService1/DeleteBorrowResponse")]
        System.Threading.Tasks.Task<string> DeleteBorrowAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IService1Channel : ServiceReference.IService1, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ServiceReference.IService1>, ServiceReference.IService1
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public Service1Client() : 
                base(Service1Client.GetDefaultBinding(), Service1Client.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService1.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), Service1Client.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value)
        {
            return base.Channel.GetDataAsync(value);
        }
        
        public System.Threading.Tasks.Task<SOAP.CompositeType> GetDataUsingDataContractAsync(SOAP.CompositeType composite)
        {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.StudentDTO[]> GetStudentsAsync()
        {
            return base.Channel.GetStudentsAsync();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.StudentDTO> GetStudentByIDAsync(int id)
        {
            return base.Channel.GetStudentByIDAsync(id);
        }
        
        public System.Threading.Tasks.Task<string> PostStudentAsync(ApplicationService.DTOs.StudentDTO studentDTO)
        {
            return base.Channel.PostStudentAsync(studentDTO);
        }
        
        public System.Threading.Tasks.Task<string> DeleteStudentAsync(int id)
        {
            return base.Channel.DeleteStudentAsync(id);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.BookDTO[]> GetBooksAsync()
        {
            return base.Channel.GetBooksAsync();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.BookDTO> GetBookByIDAsync(int id)
        {
            return base.Channel.GetBookByIDAsync(id);
        }
        
        public System.Threading.Tasks.Task<string> PostBookAsync(ApplicationService.DTOs.BookDTO bookDTO)
        {
            return base.Channel.PostBookAsync(bookDTO);
        }
        
        public System.Threading.Tasks.Task<string> DeleteBookAsync(int id)
        {
            return base.Channel.DeleteBookAsync(id);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.BorrowDTO[]> GetBorrowsAsync()
        {
            return base.Channel.GetBorrowsAsync();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.BorrowDTO> GetBorrowByIDAsync(int id)
        {
            return base.Channel.GetBorrowByIDAsync(id);
        }
        
        public System.Threading.Tasks.Task<string> PostBorrowAsync(ApplicationService.DTOs.BorrowDTO borrowDTO)
        {
            return base.Channel.PostBorrowAsync(borrowDTO);
        }
        
        public System.Threading.Tasks.Task<string> DeleteBorrowAsync(int id)
        {
            return base.Channel.DeleteBorrowAsync(id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/Design_Time_Addresses/SOAP/Service1/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return Service1Client.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return Service1Client.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IService1,
        }
    }
}
